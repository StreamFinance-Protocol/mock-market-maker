"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/*
    Native app can call JS functions with primitives.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositToMegavault = exports.getMegavaultWithdrawalInfo = exports.getMegavaultOwnerShares = exports.setSelectedGasDenom = exports.signPushNotificationTokenRegistrationPayload = exports.signCompliancePayload = exports.subaccountTransfer = exports.getWithdrawalAndTransferGatingStatus = exports.getWithdrawalCapacityByDenom = exports.cctpMultiMsgWithdraw = exports.cctpWithdraw = exports.withdrawToNobleIBC = exports.sendNobleIBC = exports.getNobleBalance = exports.getMarketPrice = exports.getCurrentUnstaking = exports.getStakingRewards = exports.getDelegatorDelegations = exports.getRewardsParams = exports.getOptimalIndexer = exports.getOptimalNode = exports.decodeAccountResponseValue = exports.encodeAccountRequestData = exports.signCancelOrder = exports.signPlaceOrder = exports.signRawPlaceOrder = exports.simulateTransferNativeToken = exports.simulateWithdraw = exports.simulateDeposit = exports.getUserStats = exports.getAccountBalances = exports.getAccountBalance = exports.transferNativeToken = exports.withdrawToIBC = exports.faucet = exports.withdraw = exports.deposit = exports.cancelOrder = exports.wrappedError = exports.placeOrder = exports.getPerpetualMarkets = exports.getEquityTiers = exports.getUserFeeTier = exports.getFeeTiers = exports.getHeight = exports.deriveMnemomicFromEthereumSignature = exports.connect = exports.connectWallet = exports.connectNetwork = exports.connectClient = void 0;
exports.withdrawFromMegavault = void 0;
const crypto_1 = require("@cosmjs/crypto");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const AuthModule = __importStar(require("cosmjs-types/cosmos/auth/v1beta1/query"));
const long_1 = __importDefault(require("long"));
const constants_1 = require("../lib/constants");
const errors_1 = require("../lib/errors");
const helpers_1 = require("../lib/helpers");
const onboarding_1 = require("../lib/onboarding");
const network_optimizer_1 = require("../network_optimizer");
const composite_client_1 = require("./composite-client");
const constants_2 = require("./constants");
const faucet_client_1 = require("./faucet-client");
const request_helpers_1 = require("./helpers/request-helpers");
const local_wallet_1 = __importDefault(require("./modules/local-wallet"));
const noble_client_1 = require("./noble-client");
const subaccount_1 = require("./subaccount");
async function connectClient(network) {
    try {
        globalThis.client = await composite_client_1.CompositeClient.connect(network);
        return (0, helpers_1.encodeJson)(network);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.connectClient = connectClient;
async function connectNetwork(paramsJSON) {
    try {
        const params = JSON.parse(paramsJSON);
        const { indexerUrl, websocketUrl, validatorUrl, chainId, faucetUrl, nobleValidatorUrl, USDC_DENOM, USDC_DECIMALS, USDC_GAS_DENOM, CHAINTOKEN_DENOM, CHAINTOKEN_DECIMALS, CHAINTOKEN_GAS_DENOM, txnMemo, } = params;
        if (indexerUrl === undefined ||
            websocketUrl === undefined ||
            validatorUrl === undefined ||
            chainId === undefined) {
            throw new errors_1.UserError('Missing required network params');
        }
        if (USDC_DENOM === undefined ||
            USDC_DECIMALS === undefined ||
            CHAINTOKEN_DENOM === undefined ||
            CHAINTOKEN_DECIMALS === undefined) {
            throw new errors_1.UserError('Missing required token params');
        }
        if (txnMemo === undefined) {
            throw new errors_1.UserError('Missing required transaction memo (`txnMemo`)');
        }
        const denomConfig = {
            USDC_DENOM,
            USDC_DECIMALS,
            USDC_GAS_DENOM,
            CHAINTOKEN_DENOM,
            CHAINTOKEN_DECIMALS,
            CHAINTOKEN_GAS_DENOM,
        };
        const indexerConfig = new constants_2.IndexerConfig(indexerUrl, websocketUrl);
        const validatorConfig = new constants_2.ValidatorConfig(validatorUrl, chainId, denomConfig, undefined, txnMemo);
        const config = new constants_2.Network('native', indexerConfig, validatorConfig);
        globalThis.client = await composite_client_1.CompositeClient.connect(config);
        if (faucetUrl !== undefined) {
            globalThis.faucetClient = new faucet_client_1.FaucetClient(faucetUrl);
        }
        else {
            globalThis.faucetClient = null;
        }
        try {
            globalThis.nobleClient = new noble_client_1.NobleClient(nobleValidatorUrl, txnMemo);
            if (globalThis.nobleWallet) {
                await globalThis.nobleClient.connect(globalThis.nobleWallet);
            }
        }
        catch (e) {
            console.error('Failed to connect to noble validator');
        }
        return (0, helpers_1.encodeJson)(config);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.connectNetwork = connectNetwork;
async function connectWallet(mnemonic) {
    var _a;
    try {
        globalThis.wallet = await local_wallet_1.default.fromMnemonic(mnemonic, constants_1.BECH32_PREFIX);
        globalThis.nobleWallet = await local_wallet_1.default.fromMnemonic(mnemonic, constants_1.NOBLE_BECH32_PREFIX);
        const { privateKey, publicKey } = (0, onboarding_1.deriveHDKeyFromMnemonic)(mnemonic);
        globalThis.hdKey = {
            privateKey,
            publicKey,
        };
        try {
            await ((_a = globalThis.nobleClient) === null || _a === void 0 ? void 0 : _a.connect(globalThis.nobleWallet));
        }
        catch (e) {
            console.error('Failed to connect to noble validator');
        }
        const address = globalThis.wallet.address;
        return (0, helpers_1.encodeJson)({ address });
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.connectWallet = connectWallet;
async function connect(network, mnemonic) {
    try {
        await connectClient(network);
        return connectWallet(mnemonic);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.connect = connect;
async function deriveMnemomicFromEthereumSignature(signature) {
    try {
        const { mnemonic, privateKey, publicKey } = (0, onboarding_1.deriveHDKeyFromEthereumSignature)(signature);
        const wallet = await local_wallet_1.default.fromMnemonic(mnemonic, constants_1.BECH32_PREFIX);
        globalThis.hdKey = {
            privateKey,
            publicKey,
        };
        const result = { mnemonic, address: wallet.address };
        return new Promise((resolve) => {
            resolve((0, helpers_1.encodeJson)(result));
        });
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.deriveMnemomicFromEthereumSignature = deriveMnemomicFromEthereumSignature;
async function getHeight() {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const block = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.latestBlock());
        return (0, helpers_1.encodeJson)(block);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getHeight = getHeight;
async function getFeeTiers() {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const feeTiers = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getFeeTiers());
        return (0, helpers_1.encodeJson)(feeTiers);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getFeeTiers = getFeeTiers;
async function getUserFeeTier(address) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const feeTiers = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getUserFeeTier(address));
        return (0, helpers_1.encodeJson)(feeTiers);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getUserFeeTier = getUserFeeTier;
async function getEquityTiers() {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const equityTiers = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getEquityTierLimitConfiguration());
        return (0, helpers_1.encodeJson)(equityTiers, helpers_1.ByteArrayEncoding.BIGINT);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getEquityTiers = getEquityTiers;
async function getPerpetualMarkets() {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const markets = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.indexerClient.markets.getPerpetualMarkets());
        return (0, helpers_1.encodeJson)(markets);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getPerpetualMarkets = getPerpetualMarkets;
async function placeOrder(payload) {
    var _a, _b, _c, _d, _e, _f, _g;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const marketId = json.marketId;
        if (marketId === undefined) {
            throw new errors_1.UserError('marketId is not set');
        }
        const type = json.type;
        if (type === undefined) {
            throw new errors_1.UserError('type is not set');
        }
        const side = json.side;
        if (side === undefined) {
            throw new errors_1.UserError('side is not set');
        }
        const price = json.price;
        if (price === undefined) {
            throw new errors_1.UserError('price is not set');
        }
        // trigger_price: number,   // not used for MARKET and LIMIT
        const size = json.size;
        if (size === undefined) {
            throw new errors_1.UserError('size is not set');
        }
        const clientId = json.clientId;
        if (clientId === undefined) {
            throw new errors_1.UserError('clientId is not set');
        }
        const timeInForce = json.timeInForce;
        const goodTilTimeInSeconds = (_a = json.goodTilTimeInSeconds) !== null && _a !== void 0 ? _a : 0;
        const goodTilBlock = (_b = json.goodTilBlock) !== null && _b !== void 0 ? _b : undefined;
        const execution = json.execution;
        const postOnly = (_c = json.postOnly) !== null && _c !== void 0 ? _c : false;
        const reduceOnly = (_d = json.reduceOnly) !== null && _d !== void 0 ? _d : false;
        const triggerPrice = (_e = json.triggerPrice) !== null && _e !== void 0 ? _e : undefined;
        const marketInfo = (_f = json.marketInfo) !== null && _f !== void 0 ? _f : undefined;
        const currentHeight = (_g = json.currentHeight) !== null && _g !== void 0 ? _g : undefined;
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.placeOrder(subaccount, marketId, type, side, price, size, clientId, timeInForce, goodTilTimeInSeconds, execution, postOnly, reduceOnly, triggerPrice, marketInfo, currentHeight, goodTilBlock);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.placeOrder = placeOrder;
function wrappedError(error) {
    const text = JSON.stringify(error, Object.getOwnPropertyNames(error));
    return `{"error": ${text}}`;
}
exports.wrappedError = wrappedError;
async function cancelOrder(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const clientId = json.clientId;
        if (clientId === undefined) {
            throw new errors_1.UserError('clientId is not set');
        }
        const orderFlags = json.orderFlags;
        if (orderFlags === undefined) {
            throw new errors_1.UserError('orderFlags is not set');
        }
        const clobPairId = json.clobPairId;
        if (clobPairId === undefined) {
            throw new errors_1.UserError('clobPairId is not set');
        }
        const goodTilBlock = json.goodTilBlock;
        const goodTilBlockTime = json.goodTilBlockTime;
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.cancelRawOrder(subaccount, clientId, orderFlags, clobPairId, goodTilBlock !== 0 ? goodTilBlock : undefined, goodTilBlockTime !== 0 ? goodTilBlockTime : undefined);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.cancelOrder = cancelOrder;
async function deposit(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.depositToSubaccount(subaccount, amount);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.deposit = deposit;
async function withdraw(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.withdrawFromSubaccount(subaccount, amount, json.recipient, json.memo);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.withdraw = withdraw;
async function faucet(payload) {
    try {
        const faucetClient = globalThis.faucetClient;
        if (!faucetClient) {
            throw new errors_1.UserError('faucetClient is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const response = await faucetClient.fill(wallet.address, subaccountNumber, amount);
        const sanitized = {
            data: response.data,
            status: response.status,
            headers: response.headers,
        };
        return (0, helpers_1.encodeJson)(sanitized);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.faucet = faucet;
async function withdrawToIBC(subaccountNumber, amount, payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const decode = (str) => Buffer.from(str, 'base64').toString('binary');
        const decoded = decode(payload);
        const json = JSON.parse(decoded);
        const ibcMsg = {
            typeUrl: json.msgTypeUrl,
            value: {
                ...json.msg,
                // Squid returns timeoutTimestamp as Long, but the signer expects BigInt
                timeoutTimestamp: json.msg.timeoutTimestamp
                    ? BigInt(long_1.default.fromValue(json.msg.timeoutTimestamp).toString())
                    : undefined,
            },
        };
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const subaccountMsg = client.withdrawFromSubaccountMessage(subaccount, amount);
        const msgs = [subaccountMsg, ibcMsg];
        const encodeObjects = new Promise((resolve) => resolve(msgs));
        const tx = await client.send(wallet, () => {
            return encodeObjects;
        }, false, undefined, undefined);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.withdrawToIBC = withdrawToIBC;
async function transferNativeToken(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const msg = client.sendTokenMessage(wallet, amount, json.recipient);
        const msgs = [msg];
        const encodeObjects = new Promise((resolve) => resolve(msgs));
        const tx = await client.send(wallet, () => {
            return encodeObjects;
        }, false, client.validatorClient.post.defaultDydxGasPrice, json.memo);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.transferNativeToken = transferNativeToken;
async function getAccountBalance() {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const address = globalThis.wallet.address;
        const tx = await client.validatorClient.get.getAccountBalance(address, client.validatorClient.config.denoms.USDC_DENOM);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getAccountBalance = getAccountBalance;
async function getAccountBalances() {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const address = globalThis.wallet.address;
        const tx = await client.validatorClient.get.getAccountBalances(address);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getAccountBalances = getAccountBalances;
async function getUserStats(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const address = json.address;
        if (address === undefined) {
            throw new errors_1.UserError('address is not set');
        }
        const tx = await client.validatorClient.get.getUserStats(address);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getUserStats = getUserStats;
async function simulateDeposit(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const msg = client.depositToSubaccountMessage(subaccount, amount);
        const msgs = [msg];
        const encodeObjects = new Promise((resolve) => resolve(msgs));
        const stdFee = await client.simulate(globalThis.wallet, () => {
            return encodeObjects;
        });
        return JSON.stringify(stdFee);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.simulateDeposit = simulateDeposit;
async function simulateWithdraw(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const msg = client.withdrawFromSubaccountMessage(subaccount, amount, json.recipient);
        const msgs = [msg];
        const encodeObjects = new Promise((resolve) => resolve(msgs));
        const stdFee = await client.simulate(globalThis.wallet, () => {
            return encodeObjects;
        });
        return (0, helpers_1.encodeJson)(stdFee);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.simulateWithdraw = simulateWithdraw;
async function simulateTransferNativeToken(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const recipient = json.recipient;
        if (recipient === undefined) {
            throw new errors_1.UserError('recipient is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        const msg = client.sendTokenMessage(wallet, amount, json.recipient);
        const msgs = [msg];
        const encodeObjects = new Promise((resolve) => resolve(msgs));
        const stdFee = await client.simulate(globalThis.wallet, () => {
            return encodeObjects;
        }, client.validatorClient.post.defaultDydxGasPrice);
        return (0, helpers_1.encodeJson)(stdFee);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.simulateTransferNativeToken = simulateTransferNativeToken;
async function signRawPlaceOrder(subaccountNumber, clientId, clobPairId, side, quantums, subticks, timeInForce, orderFlags, reduceOnly, goodTilBlock, goodTilBlockTime, clientMetadata) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const msgs = new Promise((resolve) => {
            const msg = client.validatorClient.post.composer.composeMsgPlaceOrder(wallet.address, subaccountNumber, clientId, clobPairId, orderFlags, goodTilBlock, goodTilBlockTime, side, quantums, subticks, timeInForce, reduceOnly, clientMetadata !== null && clientMetadata !== void 0 ? clientMetadata : 0);
            resolve([msg]);
        });
        const signed = await client.sign(wallet, () => msgs, true);
        return Buffer.from(signed).toString('base64');
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.signRawPlaceOrder = signRawPlaceOrder;
async function signPlaceOrder(subaccountNumber, marketId, type, side, price, 
// trigger_price: number,   // not used for MARKET and LIMIT
size, clientId, timeInForce, goodTilTimeInSeconds, execution, postOnly, reduceOnly) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const signed = await client.signPlaceOrder(subaccount, marketId, type, side, price, size, clientId, timeInForce, goodTilTimeInSeconds, execution, postOnly, reduceOnly);
        return signed;
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.signPlaceOrder = signPlaceOrder;
async function signCancelOrder(subaccountNumber, clientId, orderFlags, clobPairId, goodTilBlock, goodTilBlockTime) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const signed = await client.signCancelOrder(subaccount, clientId, orderFlags, clobPairId, goodTilBlock, goodTilBlockTime);
        return signed;
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.signCancelOrder = signCancelOrder;
async function encodeAccountRequestData(address) {
    return new Promise((resolve, reject) => {
        try {
            const requestData = Uint8Array.from(AuthModule.QueryAccountRequest.encode({ address }).finish());
            resolve(Buffer.from(requestData).toString('hex'));
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.encodeAccountRequestData = encodeAccountRequestData;
async function decodeAccountResponseValue(value) {
    return new Promise((resolve, reject) => {
        try {
            const rawData = Buffer.from(value, 'base64');
            const rawAccount = AuthModule.QueryAccountResponse.decode(rawData).account;
            // The promise should have been rejected if the rawAccount was undefined.
            if (rawAccount === undefined) {
                throw Error('rawAccount is undefined');
            }
            const account = (0, stargate_1.accountFromAny)(rawAccount);
            resolve((0, helpers_1.encodeJson)(account));
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.decodeAccountResponseValue = decodeAccountResponseValue;
async function getOptimalNode(endpointUrlsAsJson) {
    /*
      param:
        endpointUrlsAsJson:
        {
          "endpointUrls": [
            "https://rpc.testnet.near.org"
          ],
          "chainId": "testnet"
        }
    */
    try {
        const param = JSON.parse(endpointUrlsAsJson);
        const endpointUrls = param.endpointUrls;
        const chainId = param.chainId;
        const networkOptimizer = new network_optimizer_1.NetworkOptimizer();
        const optimalUrl = await networkOptimizer.findOptimalNode(endpointUrls, chainId);
        const url = {
            url: optimalUrl,
        };
        return (0, helpers_1.encodeJson)(url);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getOptimalNode = getOptimalNode;
async function getOptimalIndexer(endpointUrlsAsJson) {
    /*
      param:
        endpointUrlsAsJson:
        {
          "endpointUrls": [
            "https://api.example.org"
          ]
        }
    */
    try {
        const param = JSON.parse(endpointUrlsAsJson);
        const endpointUrls = param.endpointUrls;
        const networkOptimizer = new network_optimizer_1.NetworkOptimizer();
        const optimalUrl = await networkOptimizer.findOptimalIndexer(endpointUrls);
        const url = {
            url: optimalUrl,
        };
        return (0, helpers_1.encodeJson)(url);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getOptimalIndexer = getOptimalIndexer;
async function getRewardsParams() {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const rewardsParams = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getRewardsParams());
        return (0, helpers_1.encodeJson)(rewardsParams);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getRewardsParams = getRewardsParams;
async function getDelegatorDelegations(payload) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const address = json.address;
        if (address === undefined) {
            throw new errors_1.UserError('address is not set');
        }
        const delegations = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getDelegatorDelegations(address));
        return (0, helpers_1.encodeJson)(delegations);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getDelegatorDelegations = getDelegatorDelegations;
async function getStakingRewards(payload) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const address = json.address;
        if (address === undefined) {
            throw new errors_1.UserError('address is not set');
        }
        const delegations = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getDelegationTotalRewards(address));
        return (0, helpers_1.encodeJson)(delegations);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getStakingRewards = getStakingRewards;
async function getCurrentUnstaking(payload) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const address = json.address;
        if (address === undefined) {
            throw new errors_1.UserError('address is not set');
        }
        const delegations = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getDelegatorUnbondingDelegations(address));
        return (0, helpers_1.encodeJson)(delegations);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getCurrentUnstaking = getCurrentUnstaking;
async function getMarketPrice(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const marketId = json.marketId;
        if (marketId === undefined) {
            throw new errors_1.UserError('marketId is not set');
        }
        const marketPrice = await client.validatorClient.get.getPrice(marketId);
        return (0, helpers_1.encodeJson)(marketPrice);
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getMarketPrice = getMarketPrice;
async function getNobleBalance() {
    try {
        const client = globalThis.nobleClient;
        if (client === undefined || !client.isConnected) {
            throw new errors_1.UserError('client is not connected.');
        }
        const coin = await client.getAccountBalance('uusdc');
        return (0, helpers_1.encodeJson)(coin);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getNobleBalance = getNobleBalance;
async function sendNobleIBC(squidPayload) {
    try {
        const client = globalThis.nobleClient;
        if (client === undefined || !client.isConnected) {
            throw new errors_1.UserError('client is not connected.');
        }
        const json = JSON.parse(squidPayload);
        const ibcMsg = {
            typeUrl: json.msgTypeUrl,
            value: {
                ...json.msg,
                // Squid returns timeoutTimestamp as Long, but the signer expects BigInt
                timeoutTimestamp: json.msg.timeoutTimestamp
                    ? BigInt(long_1.default.fromValue(json.msg.timeoutTimestamp).toString())
                    : undefined,
            },
        };
        const fee = await client.simulateTransaction([ibcMsg]);
        if (!ibcMsg.value.token) {
            throw new errors_1.UserError('Payload missing token field');
        }
        // take out fee from amount before sweeping
        const amount = parseInt(ibcMsg.value.token.amount, 10) -
            Math.floor(parseInt(fee.amount[0].amount, 10) * constants_1.GAS_MULTIPLIER);
        if (amount <= 0) {
            throw new errors_1.UserError('noble balance does not cover fees');
        }
        ibcMsg.value.token = (0, proto_signing_1.coin)(amount.toString(), ibcMsg.value.token.denom);
        const tx = await client.IBCTransfer(ibcMsg);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.sendNobleIBC = sendNobleIBC;
async function withdrawToNobleIBC(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const { subaccountNumber, amount, ibcPayload } = json !== null && json !== void 0 ? json : {};
        const decode = (str) => Buffer.from(str, 'base64').toString('binary');
        const decoded = decode(ibcPayload);
        const parsedIbcPayload = JSON.parse(decoded);
        const msg = client.withdrawFromSubaccountMessage(new subaccount_1.SubaccountInfo(wallet, subaccountNumber), parseFloat(amount).toFixed(client.validatorClient.config.denoms.USDC_DECIMALS));
        const ibcMsg = {
            typeUrl: parsedIbcPayload.msgTypeUrl,
            value: {
                ...parsedIbcPayload.msg,
                // Squid returns timeoutTimestamp as Long, but the signer expects BigInt
                timeoutTimestamp: parsedIbcPayload.msg.timeoutTimestamp
                    ? BigInt(long_1.default.fromValue(parsedIbcPayload.msg.timeoutTimestamp).toString())
                    : undefined,
            },
        };
        const tx = await client.send(wallet, () => Promise.resolve([msg, ibcMsg]), false);
        return (0, helpers_1.encodeJson)({
            txHash: `0x${Buffer.from(tx === null || tx === void 0 ? void 0 : tx.hash).toString('hex')}`,
        });
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.withdrawToNobleIBC = withdrawToNobleIBC;
async function cctpWithdraw(squidPayload) {
    try {
        const client = globalThis.nobleClient;
        if (client === undefined || !client.isConnected) {
            throw new errors_1.UserError('client is not connected.');
        }
        const json = JSON.parse(squidPayload);
        const ibcMsg = {
            typeUrl: json.typeUrl,
            value: json.value,
        };
        const fee = await client.simulateTransaction([ibcMsg]);
        // take out fee from amount before sweeping
        const amount = parseInt(ibcMsg.value.amount, 10) -
            Math.floor(parseInt(fee.amount[0].amount, 10) * constants_1.GAS_MULTIPLIER);
        if (amount <= 0) {
            throw new Error('noble balance does not cover fees');
        }
        ibcMsg.value.amount = amount.toString();
        const tx = await client.send([ibcMsg]);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.cctpWithdraw = cctpWithdraw;
async function cctpMultiMsgWithdraw(cosmosPayload) {
    try {
        const client = globalThis.nobleClient;
        const messages = JSON.parse(cosmosPayload);
        if (client === undefined || !client.isConnected) {
            throw new errors_1.UserError('client is not connected.');
        }
        const ibcMsgs = messages.map(({ typeUrl, value }) => ({
            typeUrl,
            value,
        }));
        const fee = await client.simulateTransaction(ibcMsgs);
        // take out fee from amount before sweeping
        const amount = parseInt(ibcMsgs[0].value.amount, 10) -
            Math.floor(parseInt(fee.amount[0].amount, 10) * constants_1.GAS_MULTIPLIER);
        if (amount <= 0) {
            throw new Error('noble balance does not cover fees');
        }
        ibcMsgs[0].value.amount = amount.toString();
        const tx = await client.send(ibcMsgs);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.cctpMultiMsgWithdraw = cctpMultiMsgWithdraw;
async function getWithdrawalCapacityByDenom(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const denom = json.denom;
        if (denom === undefined) {
            throw new errors_1.UserError('denom is not set');
        }
        const response = await client.validatorClient.get.getWithdrawalCapacityByDenom(denom);
        return (0, helpers_1.encodeJson)(response, helpers_1.ByteArrayEncoding.BIGINT);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getWithdrawalCapacityByDenom = getWithdrawalCapacityByDenom;
async function getWithdrawalAndTransferGatingStatus(perpetualId) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const response = await client.validatorClient.get.getWithdrawalAndTransferGatingStatus(perpetualId);
        return (0, helpers_1.encodeJson)(response);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.getWithdrawalAndTransferGatingStatus = getWithdrawalAndTransferGatingStatus;
async function subaccountTransfer(payload) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const json = JSON.parse(payload);
        const subaccountNumber = json.subaccountNumber;
        if (subaccountNumber === undefined) {
            throw new errors_1.UserError('subaccountNumber is not set');
        }
        const amount = json.amount;
        if (amount === undefined) {
            throw new errors_1.UserError('amount is not set');
        }
        let destinationAddress = json.destinationAddress;
        if (destinationAddress === undefined) {
            destinationAddress = wallet.address;
        }
        const destinationSubaccountNumber = json.destinationSubaccountNumber;
        if (destinationSubaccountNumber === undefined) {
            throw new errors_1.UserError('destinationSubaccountNumber is not set');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.transferToSubaccount(subaccount, destinationAddress, destinationSubaccountNumber, parseFloat(amount).toFixed(6), tendermint_rpc_1.Method.BroadcastTxCommit);
        return (0, helpers_1.encodeJson)(tx);
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.subaccountTransfer = subaccountTransfer;
async function signCompliancePayload(payload) {
    var _a, _b;
    try {
        const json = JSON.parse(payload);
        const message = json.message;
        if (message === undefined) {
            throw new errors_1.UserError('message is not set');
        }
        const action = json.action;
        if (action === undefined) {
            throw new errors_1.UserError('action is not set');
        }
        const currentStatus = json.status;
        if (currentStatus === undefined) {
            throw new errors_1.UserError('status is not set');
        }
        if (!((_a = globalThis.hdKey) === null || _a === void 0 ? void 0 : _a.privateKey) || !((_b = globalThis.hdKey) === null || _b === void 0 ? void 0 : _b.publicKey)) {
            throw new Error('Missing hdKey');
        }
        const timestampInSeconds = Math.floor(Date.now() / 1000);
        const messageToSign = `${message}:${action}"${currentStatus !== null && currentStatus !== void 0 ? currentStatus : ''}:${timestampInSeconds}`;
        const messageHash = (0, crypto_1.sha256)(Buffer.from(messageToSign));
        const signed = await crypto_1.Secp256k1.createSignature(messageHash, globalThis.hdKey.privateKey);
        const signedMessage = signed.toFixedLength();
        return (0, helpers_1.encodeJson)({
            signedMessage: Buffer.from(signedMessage).toString('base64'),
            publicKey: Buffer.from(globalThis.hdKey.publicKey).toString('base64'),
            timestamp: timestampInSeconds,
        });
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.signCompliancePayload = signCompliancePayload;
async function signPushNotificationTokenRegistrationPayload(payload) {
    var _a, _b;
    try {
        const json = JSON.parse(payload);
        const message = json.message;
        if (message === undefined) {
            throw new errors_1.UserError('message is not set');
        }
        if (!((_a = globalThis.hdKey) === null || _a === void 0 ? void 0 : _a.privateKey) || !((_b = globalThis.hdKey) === null || _b === void 0 ? void 0 : _b.publicKey)) {
            throw new Error('Missing hdKey');
        }
        const timestampInSeconds = Math.floor(Date.now() / 1000);
        const messageToSign = `${message}:REGISTER_TOKEN"${''}:${timestampInSeconds}`;
        const messageHash = (0, crypto_1.sha256)(Buffer.from(messageToSign));
        const signed = await crypto_1.Secp256k1.createSignature(messageHash, globalThis.hdKey.privateKey);
        const signedMessage = signed.toFixedLength();
        return (0, helpers_1.encodeJson)({
            signedMessage: Buffer.from(signedMessage).toString('base64'),
            publicKey: Buffer.from(globalThis.hdKey.publicKey).toString('base64'),
            timestamp: timestampInSeconds,
        });
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.signPushNotificationTokenRegistrationPayload = signPushNotificationTokenRegistrationPayload;
async function setSelectedGasDenom(gasDenom) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        await client.setSelectedGasDenom(gasDenom);
        return (0, helpers_1.encodeJson)('success');
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.setSelectedGasDenom = setSelectedGasDenom;
async function getMegavaultOwnerShares(payload) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const json = JSON.parse(payload);
        const address = json.address;
        if (address === undefined) {
            throw new errors_1.UserError('address is not set');
        }
        const response = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getMegavaultOwnerShares(address));
        return (0, helpers_1.encodeJson)((0, request_helpers_1.parseToPrimitives)(response));
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getMegavaultOwnerShares = getMegavaultOwnerShares;
async function getMegavaultWithdrawalInfo(sharesToWithdraw) {
    var _a;
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectClient() first');
        }
        const response = await ((_a = globalThis.client) === null || _a === void 0 ? void 0 : _a.validatorClient.get.getMegavaultWithdrawalInfo(sharesToWithdraw));
        return (0, helpers_1.encodeJson)((0, request_helpers_1.parseToPrimitives)(response));
    }
    catch (e) {
        return wrappedError(e);
    }
}
exports.getMegavaultWithdrawalInfo = getMegavaultWithdrawalInfo;
async function depositToMegavault(subaccountNumber, amountUsdc) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.depositToMegavault(subaccount, amountUsdc, tendermint_rpc_1.Method.BroadcastTxCommit);
        return (0, helpers_1.encodeJson)((0, request_helpers_1.parseToPrimitives)(tx));
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.depositToMegavault = depositToMegavault;
async function withdrawFromMegavault(subaccountNumber, shares, minAmount) {
    try {
        const client = globalThis.client;
        if (client === undefined) {
            throw new errors_1.UserError('client is not connected. Call connectNetwork() first');
        }
        const wallet = globalThis.wallet;
        if (wallet === undefined) {
            throw new errors_1.UserError('wallet is not set. Call connectWallet() first');
        }
        const subaccount = new subaccount_1.SubaccountInfo(wallet, subaccountNumber);
        const tx = await client.withdrawFromMegavault(subaccount, shares, minAmount, tendermint_rpc_1.Method.BroadcastTxCommit);
        return (0, helpers_1.encodeJson)((0, request_helpers_1.parseToPrimitives)(tx));
    }
    catch (error) {
        return wrappedError(error);
    }
}
exports.withdrawFromMegavault = withdrawFromMegavault;
//# sourceMappingURL=data:application/json;base64,